// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refreshtoken.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const createRefreshToken = `-- name: CreateRefreshToken :execresult
INSERT INTO refresh_tokens (user_id, hashed_token, expires_at)
VALUES (?, ?, ?)
`

type CreateRefreshTokenParams struct {
	UserID      uint      `json:"user_id"`
	HashedToken string    `json:"hashed_token"`
	ExpiresAt   time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRefreshToken, arg.UserID, arg.HashedToken, arg.ExpiresAt)
}

const deleteUserTokens = `-- name: DeleteUserTokens :execresult
Delete FROM refresh_tokens
WHERE user_id = ?
`

func (q *Queries) DeleteUserTokens(ctx context.Context, userID uint) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUserTokens, userID)
}

const getRefreshTokenByID = `-- name: GetRefreshTokenByID :one
SELECT id, user_id, hashed_token, created_at, expires_at
FROM refresh_tokens
WHERE id = ?
`

func (q *Queries) GetRefreshTokenByID(ctx context.Context, id uint) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByID, id)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.HashedToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getRefreshTokenByUserIDAndToken = `-- name: GetRefreshTokenByUserIDAndToken :one
SELECT id, user_id, hashed_token, created_at, expires_at
FROM refresh_tokens
WHERE user_id = ?
    AND hashed_token = ?
`

type GetRefreshTokenByUserIDAndTokenParams struct {
	UserID      uint   `json:"user_id"`
	HashedToken string `json:"hashed_token"`
}

func (q *Queries) GetRefreshTokenByUserIDAndToken(ctx context.Context, arg GetRefreshTokenByUserIDAndTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByUserIDAndToken, arg.UserID, arg.HashedToken)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.HashedToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
